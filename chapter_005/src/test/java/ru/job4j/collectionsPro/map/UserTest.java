package ru.job4j.collectionsPro.map;

import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class UserTest {

    @Test
    public void whenCreateTwoDublicatsWithoutOverrideHashcode() {
        User user1 = new User("Ivan", 0, 15, 02, 1987);
        User user2 = new User("Ivan", 0, 15, 02, 1987);

        Map<User, Object> map = new HashMap<>();
        map.put(user1, new Object());
        map.put(user2, new Object());

        /**
         * Что произойдет если не перекрыть equals и hashcode?
         * В коллекции мар оьбекты храняться в соответсвии со своим вычисленым значением в hashCode()
         * Когда метод hashCode() не переопределен, обьектам просто присваеться адресс из памяти (В куче).
         * Соответсвенно две разные области памяти два разных обьекта.
         *
         * что происходит при добовлении в map?
         * При добавлении новой записи в HashMap, вычисляется хэшкод ключа.
         * По хэшкоду ключа находится позиция куда следует поместить новое значение.
         * Хэш и ключ нового элемента поочередно сравниваются с хэшами и ключами элементов из списка и, при совпадении этих параметров, значение элемента перезаписывается.
         * Если совпадения не выявились, то в цепочку будет вставлен новый элемент.
         *
         * Что произойдет если переопределить только hashCode?
         * В том случае когда переопределили hashcode(определяет уникальный ключ для обьекта),
         * ключ стал одинаковым но обьекты(вставляемая ассоциация) все ровно не будут уникальными,
         * условие их равенства не определенно через equals.
         * Условия равенсва при вставке обьекта не выполнется,
         * в коде метода put - if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))))
         * Диапозон значений хешкод ограничен диапозоном int.
         * hashcode - определяет вкакую ячейку памяти положить обьект, с помощью этого ключа получают обьект обратно.
         * Времпя получения и вставки обекта - одинаковое.
         * Java - сама не может гарантировать уникальность обьекту потомучто ограничен диапозон значений int
         */
        System.out.println(map);
    }
}
